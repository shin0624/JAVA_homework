//Ch2

     1) UI 클래스 내의 getLine() 함수 이름을 getNextLine() 으로 수정하라.
     2) UI.getLine(...)을 호출하는 모든 곳을 찾아 함수 이름을 UI.getNextLine(...)으로 수정하라.
  
/******************************************************************************
 * 이번 문제의 목적: 입출력 함수 호출 연습
 *               while, switch, operator 연습
                 입력을 위한 User Interface(UI)용 클래스 함수 구현
 ******************************************************************************/
// 아래 문제를 해결하는 도중 출력이 잘못되었거나 문제 설명과 출력이 일치하지 않거나 오타가 있거나 등등
// https://clc.chosun.ac.kr 쪽지로 알려 주시기 바랍니다.

/******************************************************************************
 * 프로젝트 및 소스파일 생성
 ******************************************************************************/
// 1) 메뉴 [File]->[New]->[Java Project] 한 후 새로운 프로젝트 CH2를 만들어라.
// 2) 메뉴 [File]->[New]->[Class] 를 선택한 후 아래처럼 입력하여 Main.java 소스 파일을 작성하라.
//
//    Source folder: CH2/src
//    Package:       [이 부분은 비어 있어야 함: 반드시 확인할 것]
//    Name:          Main
//    Modifiers: public
//
// 3) 아래 코드들을("// 소스 파일 끝" 앞까지) 복사해서 소스파일에 삽입하라.
//-----------------------------------------------------------------------------

//
// CH2: Main.java
//
//  Created on: 2023. 09. ?.
//      Author: your name
//
//  1) 입출력 함수 호출 연습
//  2) while, switch 문장, operator
//  3) User Interface 용 함수들 구현
//

import java.util.*;

//===============================================================================
// main()
//===============================================================================
public class Main 
{
    public static void main(String[] args) {
        //--------------------------------
        // AutoCheck(chk, trace)
        // chk: 1(자동 오류 체크), 0(키보드에서 직접 입력하여 프로그램 실행)
        // trace: true(오류발생한 곳 출력), false(단순히 O, X만 표시)
        //--------------------------------
        //int chk = 1; if (chk != 0) new AutoCheck(chk, true).run(); else

        // TODO: System.in을 인자로 하는 Scanner 객체를 생성한 후
        //       해당 객체를 아래 run() 함수의 인자로 넘겨 주어라. (null 대신에 넘겨 줄 것)
        //       위 기능을 반드시 하나의 문장으로 완성해야 한다. 변수 선언하지 말고 바로 넘겨 줌
        //       즉, run( Scanner 객체를 생성 ); 형태가 되어야 한다.
        run(null);
    }

    public static void run(Scanner scan) {
        // UI 클래스의 setScanner() 함수를 호출함; setScanner()가 static 함수라 이렇게 호출 가능함
        UI.setScanner(scan); // UI 클래스 내의 static 함수 호출
        //MainMenu.run(); // MainMenu 클래스 내의 static 함수 호출방법: 클래스이름.함수이름();
        // TODO: scan이 더 이상 필요없으므로 닫아라.
    }
}

//===============================================================================
// Main Menu
//===============================================================================
class MainMenu
{
    public static void run() {
        String menuStr =
                "******** Main Menu ********\n" +
                "* 0.exit 1.JavaBasic(ch2) *\n" +
                "***************************\n";

        int menuItem = UI.getInt("\n"+menuStr+"menu item? ");
        // TODO: 입력 받은 memnuItem 값을 프로그램 실행결과처럼 출력하라. 예) menu item: 1

        System.out.println("\nGood bye!!");
    }
} // class MainMenu

//===============================================================================
// User Interface
//===============================================================================
class UI
{
    public static boolean echo_input = false; // 자동오류체크 시 true로 설정됨
    public static Scanner scan;

    public static void setScanner(Scanner s) { scan = s; }

    // 입력을 받기 위해 static Scanner scan 멤버를 활용하라. 즉, scan.함수() 형식으로 호출
    // 정수 값을 입력 받아 리턴함 (음수, 0, 양수)
    public static int getInt(String msg) { 

        // TODO: msg를 화면에 출력한 후 정수 값을 입력 받아 지역 변수 value에 저장함 (변수 선언할 것)
    	//       입력 시 이 클래스의 scan 멤버 변수를 활용하라. 
        //       (이 변수는 setScanner(Scanner s)에 의해 이미 초기화 되었음)

        // if (echo_input) System.out.println(value); // 자동오류체크 시 입력 값을 출력함
        // 위 문장은 자동오류체크 시에 사용되는 문장임; 일반적으로 키보드로부터 입력받을 경우 
        // 화면에 자동 echo되지만, 자동오류체크 시에는 입력파일에서 입력받은 값이 자동 echo 되지  
        // 않으므로 명시적으로 출력 버퍼에 출력(echo) 해 주어야 한다.

        // (지시가 있을 때 구현할 것) 입력 버퍼에 남아 있는 '\n'를 제거하지 않으면 다음번 getNextLine()에서 
        // '\n'만 빈 줄이 입력될 수 있으므로 입력 버퍼에 남아 있는 '\n'를 사전에 제거함

        return 0; // TODO: 입력 받은 정수 value를 리턴할 것 
    }

    // 0 또는 양의 정수 값을 입력 받아 리턴함
    public static int getPosInt(String msg) { 
        // TODO: 위 getInt(String msg)를 호출해 정수값을 입력 받은 후 입력된 값이 음수일 경우
        //       에러("Input a positive INTEGER. Try again!!") 출력하고 다시 입력 받는다.
        //       원하는 값이 입력될 때까지 위 과정을 계속 반복하여야 한다.
        return 0; // TODO: 입력된 0 또는 양수 리턴
    }
    
    // [0, (size-1)] 사이의 인덱스 값을 리턴함
    // 존재하지 않는 메뉴항목을 선택한 경우 에러 출력
    public static int getIndex(String msg, int size) { 
        // TODO: 위 getPosInt(String msg)를 호출해 0 또는 양수를 입력 받은 후 적절하지 않은 인덱스(index)일 경우 
        //       에러("index: OUT of selection range(0 ~ size-1) Try again!!")를 
        //       출력하고 다시 입력 받는다.
        return 0; // TODO: 입력 받은 값 리턴
    }

    // 사용자에게 메뉴("\n"+menuStr+"menu item? ")를 보여주고 
    // 위 getIndex(String msg, int size)를 호출해서
    // 사용자가 선택한 메뉴항목의 인덱스(0 ~ (menuCount-1))를 리턴함
    // menuCount: 메뉴항목의 개수임
    public static int selectMenu(String menuStr, int menuCount) { return 0; }

    // 중요: 위 각 함수 구현 시
    // selectMenu() -> getIndex() -> getPosInt() -> getInt() 를 호출해서 구현하여야 한다.

    // 위 getInt()를 참고하여 msg를 화면에 출력한 후 문자열 단어 하나를 입력 받아 리턴함
    public static String getNext(String msg) { 
        // TODO: msg를 화면에 출력한 후 하나의 토큰(단어)을 입력 받아 변수 token에 저장함
        // if (echo_input) System.out.println(token); // 자동오류체크 시 입력 값을 출력함
        return "";  // TODO: 입력 받은 한 단어를 리턴할 것
    }

    // msg를 화면에 출력한 후 하나의 행 전체를 입력 받아 리턴함
    public static String getNextLine(String msg) { 
        // TODO: msg를 화면에 출력한 후 한 행 전체를 입력 받아 변수 line에 저장함
        // if (echo_input) System.out.println(line); // 자동체크 시 출력됨
        return "";  // TODO: 입력 받은 한 행 전체를 리턴할 것
    }
}

//===============================================================================
// class Ch2
//===============================================================================
class Ch2 
{
    public static void run() {
        String menuStr =
             "************* Ch2 Menu ***********\n" +
             "* 0.exit 1.output 2.readToken    *\n" +
             "* 3.readLine 4.operator 5.switch *\n" +
             "**********************************\n";

        System.out.print(menuStr);
    }

    public static void output()     { System.out.println("output"); }
    public static void readToken()  {  }
    public static void readLine()   {  }
    public static void operator()   {  }
    public static void switchCase() {  }
}    

//-----------------------------------------------------------------------------
// 소스 파일 끝
//-----------------------------------------------------------------------------

/******************************************************************************
 * [문제 1-1] Scanner 객체 생성
 ******************************************************************************/
// 1) main() 함수 내의 TODO 부분을 구현하라.
// 2) Main.run() 함수 내의 MainMenu.run()의 주석을 풀고 TODO 부분을 구현하라.
// 프로그램의 실행 결과는 아래와 같아야 한다.
===============================================================================
== [문제 1-1] 실행 결과
=============================================================================== 

Good bye!!


/******************************************************************************
 * [문제 1-2] 정수 입력 받기
 ******************************************************************************/
// 아래 [실행 결과]처럼 출력되도록 
// UI.getInt() 함수와 MainMenu.run() 함수 내의 TODO 부분을 구현하라. 
// 그리고 getInt()의 아래 문장의 주석을 풀어라. 
        // if (echo_input) System.out.println(value);
        
===============================================================================
== [문제 1-2] 실행 결과
=============================================================================== 

******** Main Menu ********
* 0.exit 1.JavaBasic(ch2) *
***************************
menu item? 1                            // 사용자가 직접 입력할 것
menu item: 1
... // 지금부터 Good bye!! 문장은 생략함


/******************************************************************************
 * [문제 1-3] 양수 입력 받기
 ******************************************************************************/
// 1) MainMenu.run() 함수 내의 UI.getInt(메뉴문자열) 호출을 UI.getPosInt(메뉴문자열)로 변경하라.
// 2) 아래 실행 결과를 참고하여 양의 정수를 입력 받는 UI.getPosInt() 함수를 구현하라.
        
===============================================================================
== [문제 1-3] 실행 결과
=============================================================================== 

******** Main Menu ********
* 0.exit 1.JavaBasic(ch2) *
***************************
menu item? -1                          // 사용자 입력
Input a positive INTEGER. Try again!!

... // 메뉴 생략
menu item? -5
Input a positive INTEGER. Try again!!

... // 메뉴 생략
menu item? -100
Input a positive INTEGER. Try again!!

... // 메뉴 생략
menu item? 0
menu item: 0
&&&&&&&&&&&&&&&& 23.10.01 해결여기까지

/******************************************************************************
 * [문제 1-4] 최대 크기를 가진 인덱스 입력 받기
 ******************************************************************************/
// 1) MainMenu.run() 함수 내의 UI.getPosInt(메뉴문자열) 호출을 
//    UI.getIndex(메뉴문자열, MENU_COUNT)로 변경하라.
// 2) 상수 MENU_COUNT를 MainMenu.run() 함수 내에 선언하라.
//    상수 MENU_COUNT는 메뉴의 항목 개수이며, Main Menu의 경우 항목이 2개이다.
// 3) 아래 실행 결과를 참고하여 index 값을 입력 받는 UI.getIndex() 함수를 구현하라.
        
===============================================================================
== [문제 1-4] 실행 결과
=============================================================================== 
...
menu item? -1
Input a positive INTEGER. Try again!!
...
menu item? 2
2: OUT of selection range(0 ~ 1) Try again!!
...
menu item? 3
3: OUT of selection range(0 ~ 1) Try again!!
...
menu item? 1
menuItem: 1



/******************************************************************************
 * [문제 1-5] 메뉴 항목 번호 입력 받기
 ******************************************************************************/
// 1) MainMenu.run() 함수 내의 UI.getIndex("메뉴문자열", MENU_COUNT) 호출을 
//    UI.selectMenu(menuStr, MENU_COUNT)로 변경하라. 기존의 "메뉴문자열" 대신 menuStr만 
//    넘겨 주어라. 기존 "메뉴문자열"은 UI.selectMenu() 함수 내에서 추가될 것이다.
// 2) 메뉴항목과 입력 메시지를 보여 주고 메뉴 항목을 입력 받는 UI.selectMenu() 함수를 구현하라.
        
===============================================================================
== [문제 1-5] 실행 결과
=============================================================================== 
// 위 [문제 1-4] 실행 결과와 동일하게 출력되어야 한다.


/******************************************************************************
 * [문제 1-6] while 문장 추가
 ******************************************************************************/
// 1) MainMenu.run() 함수 내에서 메뉴를 보여주고 선택된 메뉴 항목번호를 보여주는 문장을 
//    while 문장을 이용하여 반복수행하라.
// 2) 0번 메뉴항목을 선택할 경우 loop에서 빠져 나오고 그렇지 않은 경우 계속 loop를 실행해야 한다.
        
===============================================================================
== [문제 1-6] 실행 결과
=============================================================================== 
...
menu item? 1
menuItem: 1
...
menu item? 1
menuItem: 1
...
menu item? 1
menuItem: 1
...
menu item? 0
menuItem: 0

Good bye!!


/******************************************************************************
 * [문제 1-7] switch 문장을 이용하여 선택된 메뉴항목을 수행하는 함수 호출
 ******************************************************************************/
// 1) MainMenu.run() 함수 내에서 "menuItem: " 을 출력하는 문장을 삭제하고,
// 2) switch 문장을 추가하여 선택된 메뉴 항목이 1인 경우 Ch2.run()을 호출하는 코드를 삽입하라.
//    메뉴 항목 0이 선택될 경우 여전히 프로그램이 종료되어야 한다.
        
===============================================================================
== [문제 1-7] 실행 결과
=============================================================================== 

******** Main Menu ********
* 0.exit 1.JavaBasic(ch2) *
***************************
menu item? 1
************* Ch2 Menu ***********
* 0.exit 1.output 2.readToken    *
* 3.readLine 4.operator 5.switch *
**********************************

******** Main Menu ********
* 0.exit 1.JavaBasic(ch2) *
***************************
menu item? 0

Good bye!!


/******************************************************************************
 * [문제 2-1-0] $$$$$$$$$$$23.10.02 진행해야할 부분
 ******************************************************************************/
// 1) Ch2.run() 함수 내의 System.out.print(menuStr) 문장을 삭제하라.
// 2) MainMenu.run() 함수를 참고하여 Ch2.run() 함수 내에 
//    상수 MENU_COUNT 선언, while 문, switch 문장 등을 삽입하라. 
//    Ch2의 메뉴항목 0의 경우도 switch 문장 속으로 이동시키고, 이 항목이 선택된 경우 바로 리턴하라. 
// 3) Ch2의 메뉴항목 1을 선택할 경우 output()을 호출하는 코드를 switch 문장 내에 삽입하라.
        
===============================================================================
== [문제 2-1-0] 실행 결과
=============================================================================== 
******** Main Menu ...
menu item? 1

************* Ch2 Menu ***********
* 0.exit 1.output 2.readToken    *
* 3.readLine 4.operator 5.switch *
**********************************        // 이후 메뉴 출력 생략함 
menu item? 6
6: OUT of selection range(0 ~ 5) Try again!!

menu item? 5

menu item? 1
output

menu item? 0

******** Main Menu ...
menu item?  


/******************************************************************************
 * [문제 2-1-1] 다양한 종류의 변수들을 출력하기
 ******************************************************************************/
// 1) Ch2.output() 함수 내의 System.out.println("output") 문장을 삭제한 후
//    아래 코드를 삽입하라.
//-----------------------------------------------------------------------------

        String toolName = "JDK";
        double version = 1.8;
        String released = "is released.";

        // TODO: 하나의 출력문으로 위 세 변수를 이용하여 "JDK1.8is released."가 출력되게 하라.
        // TODO: 하나의 출력문으로 위 세 변수를 이용하여 "JDK 1.8 is released."가 출력되게 하라.

        int i1 = 1, i2 = 2, i3 = 3; // 변수 선언과 함께 초기화

        // TODO: 하나의 출력문으로 위 세 변수를 이용하여 "6"가 출력되게 하라.
        // TODO: 하나의 출력문으로 위 세 변수를 이용하여 "123"가 출력되게 하라.
        // TODO: 하나의 출력문으로 위 세 변수를 이용하여 "6 123"가 출력되게 하라.

        boolean b = true;
        double d = 1.2;

        // TODO: 하나의 출력문으로 위 두 변수를 이용하여 "true false 1.2"가 출력되게 하라.
        //       변수만 사용하고 "true", "false"를 직접 출력하지는 마라.

//-----------------------------------------------------------------------------
// 2) 아래 실행결과를 참고하여 위 코드의 TODO 부분을 완성하라.
        
===============================================================================
== [문제 2-1-1] 실행 결과
=============================================================================== 
******** Main Menu ...
menu item? 1

************* Ch2 Menu ...
menu item? 1
JDK1.8is released.
JDK 1.8 is released.
6
123
6 123
true false 1.2


/******************************************************************************
 * [문제 2-2] Scanner를 이용한 다양한 종류의 데이타 입력 받기
 ******************************************************************************/
// 1) Ch2.readToken() 함수 내에 아래 코드를 삽입하라.
//-----------------------------------------------------------------------------

        String  name;    // 이름
        int     id;      // Identifier
        double  weight;  // 체중
        boolean married; // 결혼여부
        String  address; // 주소

        // TODO: 아래 실행결과를 참고하여 "person ... ):" 문자열을 출력하라.
        // TODO: UI.scan을 이용하여 name, id, weight, married 값을 입력 받아라.

        // 주소의 패턴 ":address:"을 읽어 들임: 이미 완성된 코드이므로 아래 address를 바로 활용하면 됨
        while ((address = UI.scan.findInLine(":.*:")) == null)
        	UI.scan.nextLine();  // 현재 행에 주소가 없다면 그 행을 스킵함
        address = address.substring(1, address.length()-1); // 주소 양 끝의 ':' 문자 삭제

        // TODO: "이름 id 몸무게 혼인여부 :주소:"를 출력함

//-----------------------------------------------------------------------------
// 2) Ch2의 메뉴항목 2를 선택할 경우 상응하는 함수가 호출되도록 Ch2.run()에 적절한 코드를 삽입하라.
// 3) 아래 실행결과를 참고하여 위 코드의 TODO 부분을 완성하라.
        
===============================================================================
== [문제 2-2] 실행 결과
=============================================================================== 
// 아래 메뉴 항목을 연속으로 입력하라.
menu item? 1
menu item? 2
person information(name id weight married :address:): // 출력
p 1 2.1 false :Seoul Nam-gu Gangnam-dong: // 사용자 입력
p 1 2.1 false :Seoul Nam-gu Gangnam-dong: // 출력


/******************************************************************************
 * [문제 2-3-0] Scanner를 이용한 다양한 종류의 데이타 입력 받기
 ******************************************************************************/
// 1) Ch2.readLine() 함수 내에 아래 코드를 삽입하라.
//-----------------------------------------------------------------------------

        String name = UI.getNext("name? "); // "name? "을 출력한 후 이름을 입력 받음
        // TODO: 실행결과("name: p")처럼 출력
        int id = UI.getInt("id? ");         // "id? "을 출력한 후 id을 입력 받음
        // TODO: 실행결과("id: 1")처럼 출력

//-----------------------------------------------------------------------------
// 2) Ch2의 메뉴항목 3을 선택할 경우 상응하는 함수가 호출되도록 Ch2.run()에 적절한 코드를 삽입하라.
// 3) 아래 실행결과와 UI.getInt(...) 를 참고하여 UI.getNext(String msg) 함수를 구현하라.
//    이 함수 구현 시 if (echo_input) ... 문장의 주석을 풀어라. 
        
===============================================================================
== [문제 2-3-0] 실행 결과
=============================================================================== 
menu item? 1
menu item? 3
name? p        // 사용자 입력
name: p        // 출력
id? 1
id: 1

/******************************************************************************
 * [문제 2-3-1] 입력 버퍼에 남아 있는 엔터를 미리 제거
 ******************************************************************************/
// 1) Ch2.readLine() 함수의 마지막에 아래 코드를 추가하라.
//-----------------------------------------------------------------------------

        String address = UI.getNextLine("address? ");// "address? " 출력 후 한줄 전체 입력받음
        // TODO: 문자열 address를 실행결과("address :seoul gangnam:")처럼 출력하라.

//-----------------------------------------------------------------------------
// 2) 아래 실행결과를 참고하여 UI.getNextLine(String msg) 함수를 구현하라.
//    이 함수 구현 시 if (echo_input) ... 문장의 주석을 풀어라. 
        
===============================================================================
== [문제 2-3-1] 실행 결과
=============================================================================== 
menu item? 1
menu item? 3
name? p           // 입력
name: p
id? 1             // 입력
id: 1
address? seoul gangnam  // 사용자 입력
address :seoul gangnam: // 출력

//-----------------------------------------------------------------------------
// 위와 같이 출력되는가? 아니면 아래처럼 출력되는가?
address? address ::

// 위처럼 출력되는 이유는 id? 1[엔터] 에서 1 다음에 입력한 [엔터] '\n'가 입력용 버퍼에 남아 있기 때문이다.
// 일반적으로 Scanner의 nextInt(), nextDouble(), next() 등의 함수는 토큰(단어)을 구분하는
// 스페이스, 탭, 엔터 등을 자동으로 스킵한다. 따라서 입력 버퍼에 엔터가 있을 경우 자동 스킵하지만
// Scanner의 nextLine()은 스킵하지 않고 한 줄 끝을 의미하는 엔터까지 데이터를 입력 받는다. 이 함수는
// 앞전의 1을 입력한 후에 입력된 '\n'가 계속 입력 버퍼에 남아 있기 때문에 빈 문자열을 읽고 리턴한다.

// 이 문제을 해결하기 위해 UI.getInt(...)와 UI.getNext(...) 함수에서 리턴하기 직전에 Scanner의 
// nextLine()을 호출하는 문장을 삽입하라. 이 함수는 입력버퍼에 남아 있는 엔터를 제거해 주는 역할을 한다.


/******************************************************************************
 * [문제 2-4] 
 ******************************************************************************/
// 1) Ch2.operator() 함수 내에 아래 코드를 삽입하라.
//-----------------------------------------------------------------------------

    public static void printBinStr(int v) {
    	String s = Integer.toBinaryString(v);
        for (int i=0; i < (32-s.length()); ++i)
            System.out.print('0');
        System.out.println(s);
    }
    public static void operator() {
        int b = 0b11111111_00000000_11111111_11111111;
        printBinStr(b);

        // TODO: 변수 b를 왼쪽으로 4비트 이동시킨 값을 출력하라.

        System.out.println();
        b = 0b11111111_00000000_00000000_11111111;
        printBinStr(b);

        // TODO: 변수 b를 4비트 산술적 오른쪽 시프트를 한 값을 출력하라.

        // TODO: 변수 b를 4비트 논리적 오른쪽 시프트를 한 값을 출력하라.
    }


//-----------------------------------------------------------------------------
// 2) Ch2의 메뉴항목 4를 선택할 경우 상응하는 함수가 호출되도록 Ch2.run()에 적절한 코드를 삽입하라.
// 3) 아래 실행결과를 참고하여 위 코드의 TODO 부분을 완성하라.

===============================================================================
== [문제 2-4] 실행 결과
=============================================================================== 
menu item? 1
menu item? 4
11111111000000001111111111111111
11110000000011111111111111110000

11111111000000000000000011111111
11111111111100000000000000001111
00001111111100000000000000001111


/******************************************************************************
 * [문제 2-5] 
 ******************************************************************************/
// 1) Ch2의 메뉴항목 5를 선택할 경우 아래 Ch2.switchCase() 함수가 호출되도록 
//    Ch2.run()에 적절한 코드를 삽입하라.
// 2) switchCase() 함수 내에 아래 코드를 삽입하라. 이 함수는 UI.getNext()를 통해
//    메뉴를 화면에 출력하고 메뉴항목을 항목번호가 아닌 메뉴항목 단어를 직접 입력 받는다.
//-----------------------------------------------------------------------------

    public static void switchCase() {
        String menuStr =
            "********* Switch Menu *********\n" +
            "* 0.exit 1.output 2.readToken *\n" +
            "* 3.readLine 4.operator       *\n" +
            "*******************************\n";
           
        while (true) {
            String menu = UI.getNext("\n"+menuStr+"menu item string? ");
            // menu는 메뉴항목 번호가 아닌 메뉴항목 단어를 직접 입력 받은 것임
            // TODO: Ch2.run()을 참조하여 switch 문장을 이용하여 상응하는 함수를 호출하라.
            //      단, 입력된 메뉴항목이 정수가 아니라 문자열(menu)임을 명심하라.
            //      즉, case 문장이 정수가 아니라 문자열과 비교 되어야 한다. 
        }

//-----------------------------------------------------------------------------
// 3) 아래 실행결과를 참고하여 위 코드의 TODO 부분을 완성하라.

===============================================================================
== [문제 2-5] 실행 결과
=============================================================================== 
menu item? 1
menu item? 5

********* Switch Menu *********
* 0.exit 1.output 2.readToken *
* 3.readLine 4.operator       *
*******************************
menu item string? output          // 메뉴항목 단어 입력
JDK1.8is released.
JDK 1.8 is released.
6
123
6 123
true false 1.2
15 067 0xef 0b101
15 067 0xef 101 1.2 true false

********* Switch Menu ...
menu item string? operator        // 메뉴항목 단어 입력
11111111000000001111111111111111
11110000000011111111111111110000

11111111000000000000000011111111
11111111111100000000000000001111
00001111111100000000000000001111

********* Switch Menu ...
menu item string? exit           // 메뉴항목 단어 입력

************* Ch2 Menu ...
menu item? 



/******************************************************************************
 * 프로그램의 자동 오류 체크 방법
 ******************************************************************************/
// 

/******************************************************************************
 * 자동 오류 체크 실행 결과
 ******************************************************************************/
test_1 : O
test_2 : O
test_3 : O
test_4 : O
test_5 : O
Good bye!!

/******************************************************************************
 * 프로그램 제출
 ******************************************************************************/
// 1. 중요: Main.java의 main() 함수 내에서 아래 문장처럼 [주석] 처리한 후 저장하라.
   
//    경고: 위 문장을 주석처리 하지 않은 채 제출할 경우 oj 시스템에서 컴파일 에러가 발생할 것이다. 
// 2. 프로그램 소스인 Main.java만을 oj.chosun.ac.kr에 제출하라. 
//    
//-----------------------------------------------------------------------------